
// Generated by ntoolkit/futures
package cparser

import "ntoolkit/futures"

import "ntoolkit/commands"


type DeferredCommand struct {
	DeferredValue futures.Promise
}

func (promise *DeferredCommand) init() {
	if promise.DeferredValue == nil {
		promise.DeferredValue = &futures.DeferredValue{}
	}
}

func (promise *DeferredCommand) Resolve(result commands.Command) {
	promise.init()
	promise.DeferredValue.PResolve(result)
}

func (promise *DeferredCommand) Reject(err error) {
	promise.init()
	promise.DeferredValue.PReject(err)
}

func (promise *DeferredCommand) Errors() []error {
	promise.init()
	return promise.DeferredValue.PErrors()
}

func (promise *DeferredCommand) Then(resolve func(commands.Command), reject func(error)) *DeferredCommand {
	promise.init()
	promise.DeferredValue.PThen(func(value interface{}) {
		if v, ok := value.(commands.Command); ok {
			resolve(v)
		} else {
		  panic("Invalid value used to resolve DeferredCommand")
		}
	}, reject)
	return promise
}

func (promise *DeferredCommand) PThen(result func(interface{}), reject func(error)) futures.Promise {
	promise.init()
	return promise.DeferredValue.PThen(result, reject)
}

func (promise *DeferredCommand) PErrors() []error {
	promise.init()
	return promise.DeferredValue.PErrors()
}

func (promise *DeferredCommand) PResolve(result interface{}) {
	promise.init()
	promise.DeferredValue.PResolve(result)
}

func (promise *DeferredCommand) PReject(err error) {
	promise.init()
	promise.DeferredValue.PReject(err)
}
